import type { StackScreenProps } from '@react-navigation/stack'

import { CredentialRecord } from '@aries-framework/core'
import { useCredentialById } from '@aries-framework/react-hooks'
import { RouteProp } from '@react-navigation/native'
import React, { useContext, useEffect, useState } from 'react'
import { useTranslation } from 'react-i18next'
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native'
import Toast from 'react-native-toast-message'

import { ColorPallet, TextTheme } from '../theme'
import { CredentialStackParams, Screens } from '../types/navigators'

import CredentialCard from 'components/misc/CredentialCard'
import Record2 from 'components/record2/Record2'
import { ToastType } from 'components/toast/BaseToast'
import type { OCA, 
              CaptureBase, 
              EntryOverlay, 
              MetaOverlay, 
              EntryCodeOverlay, 
              LabelOverlay, 
              FormLayoutOverlay, 
              InformationOverlay, 
              CredentialLayoutOverlay, 
              FormatOverlay } from 'oca.js'
import { OcaJs } from '../OcaJs'
//const OcaJs = require('oca.js-form-core');

type CredentialDetailsProps = StackScreenProps<CredentialStackParams, Screens.CredentialDetails>

const styles = StyleSheet.create({
  headerText: {
    ...TextTheme.normal,
  },
  footerText: {
    ...TextTheme.normal,
    paddingTop: 16,
  },
  linkContainer: {
    minHeight: TextTheme.normal.fontSize,
    paddingVertical: 2,
  },
  link: {
    ...TextTheme.normal,
    color: ColorPallet.brand.link,
  },
})

const CredentialDetails: React.FC<CredentialDetailsProps> = ({ navigation, route }) => {
  const { t } = useTranslation()

  const [credential, setCredential] = useState<CredentialRecord | void>();
  
  const captureBase: CaptureBase = {
    attributes: {"dateOfBirth":"Date","fullName":"Text"},
    classification: "GICS:45102010", // C'est quoi cet attribut?
    pii: ["dateOfBirth","fullName"],
    type: "spec/capture_base/1.0"
  };

  const frLabelOverlay: LabelOverlay = {
    capture_base: "EPMaG1h2hVxKCZ5_3KoNNwgAyd4Eq8zrxK3xgaaRsz2M", // Comment on génère un SAI?
    type: "spec/overlays/label/1.0",
    language: "fr",
    attr_labels: {"dateOfBirth":"Date de naissance","fullName":"Nom"},
    attr_categories: ["_cat-1_","_cat-2_"],
    cat_labels: { "_cat-1_": "Catégorie 1", "_cat-2_": "Catégorie 2" },
    cat_attributes: { "_cat-1_": ["dateOfBirth"], "_cat-2_": ["fullName"]}
  };

  const enLabelOverlay: LabelOverlay = {
    capture_base: "EPMaG1h2hVxKCZ5_3KoNNwgAyd4Eq8zrxK3xgaaRsz2M",
    type: "spec/overlays/label/1.0",
    language: "en",
    attr_labels: {"dateOfBirth":"Date of birth","fullName":"Fullname"},
    attr_categories: ["_cat-1_","_cat-2_"],
    cat_labels: { "_cat-1_": "Catégorie 1", "_cat-2_": "Catégorie 2" },
    cat_attributes: { "_cat-1_": ["dateOfBirth"], "_cat-2_": ["fullName"]}
  };

  const oca: OCA = {
    capture_base: captureBase,
    overlays: [frLabelOverlay, enLabelOverlay]
  };

//  useEffect(() => {
//    console.log('Avant Oui!!!!!!!!!!!!!');
//    const ocaJs = new OcaJs({});
//    console.log('Oui!!!!!!!!!!!!!');
//  })
  const ocaJs = new OcaJs({});
  //const structure = (async () => await ocaJs.createStructure(oca))();
  ocaJs.createStructure(oca).then(response => {

    //const result = JSON.parse(response);
    console.log(response);
    
  })
  .catch(error => {
    console.log(error);
  });
  let bla = 1;
  //const structure = await ocaJs.createStructure(oca)

  useEffect(() => {
    const fetchedCredential = getCredentialRecord(route.params.credentialId);
    setCredential(fetchedCredential);
  }, [])

  const getCredentialRecord = (credentialId?: string): CredentialRecord | void => {
    try {
      if (!credentialId) {
        throw new Error(t('CredentialOffer.CredentialNotFound'))
      }

      return useCredentialById(credentialId)
    } catch (e: unknown) {
      Toast.show({
        type: ToastType.Error,
        text1: t('Global.Failure'),
        text2: (e as Error)?.message || t('CredentialOffer.CredentialNotFound'),
      })

      navigation.goBack()
    }
  }

  if (!route.params.credentialId) {
    Toast.show({
      type: ToastType.Error,
      text1: t('Global.Failure'),
      text2: t('CredentialOffer.CredentialNotFound'),
    })

    navigation.goBack()
    return null
  }

  
  

  if (!credential) {
    Toast.show({
      type: ToastType.Error,
      text1: t('Global.Failure'),
      text2: t('CredentialOffer.CredentialNotFound'),
    })

    navigation.goBack()
    return null
  }
  

  return (
    <Record2
      header={() => <CredentialCard credential={credential} style={{ marginHorizontal: 15, marginTop: 46 }} />}
      footer={() => (
        <View style={{ marginBottom: 30 }}>
          <TouchableOpacity activeOpacity={1}>
            <Text style={[styles.footerText, styles.link, { color: ColorPallet.semantic.error }]}>
              {t('CredentialDetails.RemoveFromWallet')}
            </Text>
          </TouchableOpacity>
        </View>
      )}
      attributes={credential.credentialAttributes}
      hideAttributeValues={true}
    />
  )
}

export default CredentialDetails
